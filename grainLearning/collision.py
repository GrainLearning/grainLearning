# encoding: utf-8
from os.path import expanduser
import sys

# yadeimport.py is generated by `ln yade-versionNo yadeimport.py`
sys.path.append('/home/cheng/myYade/install/bin')

# import external dependencies
from yadeimport import *

# default parameters
readParamsFromTable(
   # Density
   rho = 2450,
   # Young's modulus
   E = 70e+9,
   # Poisson's ratio
   nu = 0.2,
   # final friction coefficient
   mu = 0.4,
   # timestepSafetyCoefficient
   safe = 0.1,
   # no. of your simulation
   key = 0
)

from yade.params import table
from yade import plot
import numpy as np

# function to save simulation data and stop simulation
def addSimData():
	inter = O.interactions[0,1]
	plot.addData(f=inter.phys.normalForce.norm(), u=inter.geom.penetrationDepth)
	# stop simulation is normal force is too big
	if inter.phys.normalForce.norm() > 1e9: O.pause()

# define material parameters
def setParams(**kwargs):
	# glass bead parameters (units: ug->1e-9kg; mm->1e-3m; ms->1e-3s)
	lenScale = 1e3                   # lenth in mm <- 1e-3 m
	sigScale = 1                     # Stress in ug/(mm*ms^2) <- Pa
	rhoScale = 1                     # Density in ug/mm^3 <- kg/m^3
	if 'rho' not in kwargs: raise RuntimeError,"Density rho not defined..."
	else: table.rho = kwargs['rho']*rhoScale
	if 'E' not in kwargs: raise RuntimeError,"Density E not defined..."
	else: table.E = kwargs['E']*sigScale
	if 'nu' not in kwargs: raise RuntimeError,"Poisson's ratio nu not defined..."
	else: table.nu = kwargs['nu']
	if 'mu' not in kwargs: raise RuntimeError,"Friction coefficient mu not defined..."
	else: table.mu = kwargs['mu']
	if 'safe' not in kwargs: raise RuntimeError,"Timestepping safety coefficient not defined..."
	else: table.safe = kwargs['safe']
	# create materials
	O.materials.append(FrictMat(young=table.E,poisson=table.nu,frictionAngle=atan(table.mu),density=table.rho))

# add particles to simulation
def addParticles():
	# create two particles
	O.bodies.append(sphere(Vector3(0,0,0),1,material=0,fixed=True))
	O.bodies.append(sphere(Vector3(0,0,2),1,material=0,fixed=True))
	
# set initial condition
def setInitialCondition():
	# set initial timestep
	O.dt = table.safe*PWaveTimeStep()
	# move particle 1
	O.bodies[1].state.vel = Vector3(0,0,-0.01)

# define engines
O.engines=[
	ForceResetter(),
	InsertionSortCollider([Bo1_Sphere_Aabb()]),
	InteractionLoop(
		[Ig2_Sphere_Sphere_ScGeom()],
		[Ip2_FrictMat_FrictMat_MindlinPhys()],
		[Law2_ScGeom_MindlinPhys_Mindlin()]
	),
	NewtonIntegrator(damping=0.0,label='newton'),
	# needs to add module collision before function name
	PyRunner(command='addSimData()',iterPeriod=1000)
]
